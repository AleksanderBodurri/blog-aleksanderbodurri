import { writeFileSync, readdirSync, readFileSync } from "fs";
import { format } from "prettier";

const generatedRoutesPath = "./projects/blog/src/app/generated-routes.ts";
const markdownPath = "./projects/blog/src/assets/md";
const generatedModulePath = "./projects/blog/src/app/generated-modules";
const postMetaDataPath =
  "./projects/blog/src/app/routes/posts/generated-post-metadata.ts";

let pages = [];

readdirSync(markdownPath).forEach((file) => {
  const path = `${markdownPath}/${file}`;
  const mdFiles = readdirSync(path);
  const contentFiles = mdFiles
    .filter((name) => name !== "summary.md" && name !== "metadata.json")
    .sort();

  const constructComponent = (names) => {
    let content = "";
    let escapedContent = "";
    names.forEach((name) => {
      const fileContent = readFileSync(`${path}/${name}`);
      content += fileContent;
      escapedContent += fileContent;
    });

    content = content.replace(/`/g, "\\`");

    escapedContent = escapedContent.replace(/`/g, "\\`");
    escapedContent = escapedContent.replace(/([{}<>])/g, "{{ '$1' }}");

    return `
@Component({
  selector: 'blog-${file}',
  template: \`
  <markdown *ngIf="isBrowser" ngPreserveWhitespaces>${escapedContent}</markdown>
  <pre class="server-rendered" *ngIf="!isBrowser" [innerHtml]="content"></pre>
  \`,
  styles: [\`
  
:host {
    display: block;
    width: 70%;
    margin: 2rem auto 0;
}

pre.server-rendered {
  all: unset;

  ::ng-deep {
    pre {
      background-color: #1e1f21;
      padding: 12px;
  
      pre {
        padding: 1em;
        margin: 0.5em 0;
        overflow: auto;
        border-radius: 0.3em;
      }

      code[class*=language-] {
        color: #5ab9ca;
      }
    }
  }
}

\`]
})
export class ${toUpperCamelCase(file)}Component {
  isBrowser = false;
  content = \`${content}\`;

  constructor(@Inject(PLATFORM_ID) platformId: Object, private markdownService: MarkdownService){
    this.isBrowser = isPlatformBrowser(platformId);

    if (!this.isBrowser) {
      this.content = this.markdownService.compile(this.content);
    }
  }
}
    `;
  };

  const constructModuleAndComponent = (name) => {
    const component = constructComponent(contentFiles);

    return `
// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.

import { Component, NgModule, Inject, PLATFORM_ID } from "@angular/core";
import { RouterModule } from "@angular/router";
import { MarkdownModule } from "ngx-markdown";
import { CommonModule } from "@angular/common";
import { isPlatformBrowser } from '@angular/common';
import { MarkdownService } from 'ngx-markdown';

${component}

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        pathMatch: 'full',
        component: ${toUpperCamelCase(file)}Component,
      },
    ]),
    MarkdownModule.forChild(),
  ],
  declarations: [${toUpperCamelCase(file)}Component],
  bootstrap: [],
})
export class LazyModule {}
    `;
  };

  const constructRoute = (name) => {
    return `{
      path: 'posts/${name}',
      loadChildren: () => import('./generated-modules/${name}.module').then((m) => m.LazyModule)
    }`;
  };

  const route = constructRoute(file);
  const component = constructComponent(contentFiles);
  const lazyModule = constructModuleAndComponent(file);
  const metadata = JSON.parse(readFileSync(`${path}/metadata.json`));
  metadata["slug"] = file;
  metadata["sectionNames"] = contentFiles;
  metadata["summary"] = "" + readFileSync(`${path}/summary.md`);

  pages.push({
    file,
    component,
    route,
    lazyModule,
    metadata,
  });
});

pages = pages.sort(
  (a, b) => new Date(b.metadata.date) - new Date(a.metadata.date)
);

let generatedRoutes = ``;
generatedRoutes +=
  "// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.\n";
generatedRoutes += 'import { Routes } from "@angular/router";\n\n';

generatedRoutes += `export const GENERATED_ROUTES: Routes = [${pages
  .map((page) => page.route)
  .join(",\n")}];`;
writeFileSync(
  generatedRoutesPath,
  format(generatedRoutes, { semi: false, parser: "babel" })
);

pages.forEach((page) => {
  writeFileSync(
    `${generatedModulePath}/${page.file}.module.ts`,
    page.lazyModule
  );
});

let generatedPostMetaData = ``;
generatedPostMetaData += `// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.\n`;
generatedPostMetaData += `import { PostMetaData } from "./post-metadata";\n\n`;
generatedPostMetaData += `export const postMetaData: PostMetaData[] = [${pages
  .map((page) => JSON.stringify(page.metadata))
  .join(",\n")}];`;
writeFileSync(
  postMetaDataPath,
  format(generatedPostMetaData, { semi: false, parser: "babel" })
);

function toUpperCamelCase(string) {
  return string
    .toLowerCase()
    .split("-")
    .map((it) => it.charAt(0).toUpperCase() + it.substr(1))
    .join("");
}
