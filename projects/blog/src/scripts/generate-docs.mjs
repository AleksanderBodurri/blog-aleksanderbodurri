import { writeFileSync, readdirSync, readFileSync } from "fs";
import { format } from "prettier";

const generatedRoutesPath = "./projects/blog/src/app/generated-routes.ts";
const markdownPath = "./projects/blog/src/assets/md";
const generatedModulePath = "./projects/blog/src/app/generated-route-modules";
const postMetaDataPath =
  "./projects/blog/src/app/routes/posts/generated-post-metadata.ts";

let pages = [];

readdirSync(markdownPath).forEach((file) => {
  const path = `${markdownPath}/${file}`;
  const mdFiles = readdirSync(path);
  const contentFiles = mdFiles
    .filter((name) => name !== "summary.md" && name !== "metadata.json")
    .sort();

  const constructComponent = (names, metadata) => {
    let content = "";
    let escapedContent = "";

    names.forEach((name) => {
      const fileContent = readFileSync(`${path}/${name}`);
      content += fileContent;
      escapedContent += fileContent;
    });

    content = content.replace(/`/g, "\\`");
    content = content.replace(/\$/g, "\\$");

    escapedContent = escapedContent.replace(/`/g, "\\`");
    escapedContent = escapedContent.replace(/([{}<>\$])/g, "{{ '$1' }}");

    const description = metadata["description"];
    const tags = ["blog", "post", ...(metadata?.["tags"] ?? [])];
    const title = metadata["title"];

    return `
@Component({
  selector: 'blog-${file}',
  template: \`
  <markdown *ngIf="isBrowser" ngPreserveWhitespaces>${escapedContent}</markdown>
  <pre class="server-rendered" *ngIf="!isBrowser" [innerHtml]="content"></pre>
  \`,
  styles: [\`
  
:host {
    display: block;
    max-width: 800px;
    margin: 2rem auto 0;
    
    @media screen and (max-width: 500px) {
      max-width: calc(100% - 24px);
    }
}

pre.server-rendered {
  all: unset;

  ::ng-deep {
    pre {
      background-color: #1e1f21;
      padding: 12px;
  
      pre {
        padding: 1em;
        margin: 0.5em 0;
        overflow: auto;
        border-radius: 0.3em;
      }

      code[class*=language-] {
        color: #5ab9ca;
      }
    }
  }
}

\`]
})
export class ${toUpperCamelCase(file)}Component implements OnInit, OnDestroy {
  isBrowser = false;
  content = \`${content}\`;

  constructor(
    @Inject(PLATFORM_ID) public platformId: Object,
    private markdownService: MarkdownService,
    private meta: Meta
  ){}

  ngOnInit(): void {
    this.isBrowser = isPlatformBrowser(this.platformId);

    this.meta.addTag({ property: 'oh:title', content: '${title}' });
    this.meta.addTag({ property: 'oh:type', content: 'article' });
    this.meta.addTag({ property: 'oh:url', content: 'https://aleksanderbodurri-eefbe.web.app/posts/${file}' });
    this.meta.addTag({ property: 'oh:image', content: 'http://aleksanderbodurri-eefbe.web.app/assets/me.png' });
    this.meta.addTag({ property: 'oh:image:secure_url', content: 'https://aleksanderbodurri-eefbe.web.app/assets/me.png' });

    if (${description.length > 0}) {
      this.meta.addTag({ name: 'description', content: '${description}' });
    }

    if (${tags.length > 0}) {
      this.meta.addTag({ name: 'keywords', content: '${tags.join(",")}' });
    }

    if (!this.isBrowser) {
      this.content = this.markdownService.compile(this.content);
    }
  }

  ngOnDestroy(): void {
    this.meta.removeTag('property="oh:title"');
    this.meta.removeTag('property="oh:type"');
    this.meta.removeTag('property="oh:url"');
    this.meta.removeTag('property="oh:image"');
    this.meta.removeTag('property="oh:image:secure_url"');

    if (${metadata["description"].length > 0}) {
      this.meta.removeTag('name=description');
    }
    
    if (${metadata["tags"].length > 0}) {
      this.meta.removeTag('name=keywords');
    }
  }
}
    `;
  };

  const constructModuleAndComponent = (name, metadata) => {
    const component = constructComponent(contentFiles, metadata);

    return `
// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.

import { Component, NgModule, Inject, PLATFORM_ID, OnInit, OnDestroy } from "@angular/core";
import { RouterModule } from "@angular/router";
import { MarkdownModule } from "ngx-markdown";
import { CommonModule } from "@angular/common";
import { isPlatformBrowser } from '@angular/common';
import { MarkdownService } from 'ngx-markdown';
import { Meta } from '@angular/platform-browser';

${component}

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        pathMatch: 'full',
        component: ${toUpperCamelCase(name)}Component,
      },
    ]),
    MarkdownModule.forChild(),
  ],
  declarations: [${toUpperCamelCase(name)}Component],
  bootstrap: [],
})
export class LazyModule {}
    `;
  };

  const constructRoute = (slug, title) => {
    return `{
      path: 'posts/${slug}',
      title: '${title} | Aleksander Bodurri | Blog',
      loadChildren: () => import('./generated-route-modules/${slug}.module').then((m) => m.LazyModule)
    }`;
  };

  const metadata = JSON.parse(readFileSync(`${path}/metadata.json`));
  const lazyModule = constructModuleAndComponent(file, metadata);
  const route = constructRoute(file, metadata["title"]);
  metadata["slug"] = file;
  metadata["sectionNames"] = contentFiles;
  metadata["summary"] = "" + readFileSync(`${path}/summary.md`);

  pages.push({
    file,
    route,
    lazyModule,
    metadata,
  });
});

pages = pages.sort(
  (a, b) => new Date(b.metadata.date) - new Date(a.metadata.date)
);

let generatedRoutes = ``;
generatedRoutes +=
  "// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.\n";
generatedRoutes += 'import { Routes } from "@angular/router";\n\n';

generatedRoutes += `export const GENERATED_ROUTES: Routes = [${pages
  .map((page) => page.route)
  .join(",\n")}];`;
writeFileSync(
  generatedRoutesPath,
  format(generatedRoutes, { semi: false, parser: "babel" })
);

pages.forEach((page) => {
  writeFileSync(
    `${generatedModulePath}/${page.file}.module.ts`,
    page.lazyModule
  );
});

let generatedPostMetaData = ``;
generatedPostMetaData += `// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.\n`;
generatedPostMetaData += `import { PostMetaData } from "./post-metadata";\n\n`;
generatedPostMetaData += `export const postMetaData: PostMetaData[] = [${pages
  .map((page) => JSON.stringify(page.metadata))
  .join(",\n")}];`;
writeFileSync(
  postMetaDataPath,
  format(generatedPostMetaData, { semi: false, parser: "babel" })
);

function toUpperCamelCase(string) {
  return string
    .toLowerCase()
    .split("-")
    .map((it) => it.charAt(0).toUpperCase() + it.substr(1))
    .join("");
}
