// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.
import { PostMetaData } from './post-metadata';

export const postMetaData: PostMetaData[] = [
  {
    date: '2022-06-01T23:12:00.000Z',
    title: 'Angular Components in Markdown',
    tags: ['Angular', 'angular', 'nghost', '_nghost', 'Markdown', 'md'],
    description:
      'Examples of some of the Angular components this blog uses in Markdown files.',
    slug: 'angular-components-in-markdown',
    sectionNames: [
      'code-block-component.md',
      'code-tabs-component.md',
      'hello-world-component.md',
      'metadata.json',
      'page-as-markdown.md',
      'page.md',
      'summary.md',
    ],
    summary:
      '<p>\n  Examples of some of the Angular components this blog uses in Markdown files\n</p>\n',
    codeblocks: {
      'code-block-component.md':
        '<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> posts <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../routes/posts/define-post"</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'code-block\'</span><span class="token punctuation">,</span>\n    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#x3C;div [innerHtml]="post">&#x3C;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlockComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> src <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> slug <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    post<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  \n    <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>post <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>post <span class="token operator">=></span> post<span class="token punctuation">.</span>slug <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>slug<span class="token punctuation">)</span><span class="token operator">?.</span>codeblocks<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n',
      'code-tabs-component.md':
        '<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> AfterViewInit<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> ElementRef<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> ViewChild <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/common\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeBlockComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../code-block/code-block.component\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token operator">:</span> <span class="token string">\'code-tabs\'</span><span class="token punctuation">,</span>\n  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">,</span> CodeBlockComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></span>\n<span class="token string">  &#x3C;div #headerContent style="display: none"></span>\n<span class="token string">    &#x3C;div id="code-headers"></span>\n<span class="token string">      &#x3C;ng-content select="[code-headers]">&#x3C;/ng-content></span>\n<span class="token string">    &#x3C;/div></span>\n<span class="token string">  &#x3C;/div></span>\n<span class="token string">  &#x3C;div class="tab-group"></span>\n<span class="token string">      &#x3C;header></span>\n<span class="token string">          &#x3C;ol role="tablist" #tabList></span>\n<span class="token string">              &#x3C;li class="header" id="header-{{ index }}" [class.selected]="headers[this.selectedIndex] === header" tabindex="0" role="tab" *ngFor="let header of headers; let index = index" (keydown.enter)="selectTab(index)" (click)="selectTab(index)"></span>\n<span class="token string">                  {{ header }}</span>\n<span class="token string">              &#x3C;/li></span>\n<span class="token string">          &#x3C;/ol></span>\n<span class="token string">          &#x3C;div class="highlight-track"></span>\n<span class="token string">            &#x3C;div #highlight class="highlight">&#x3C;/div></span>\n<span class="token string">          &#x3C;/div></span>\n<span class="token string">      &#x3C;/header></span>\n<span class="token string">      &#x3C;section #tabContent></span>\n<span class="token string">        &#x3C;ng-content select="[tabs]">&#x3C;/ng-content></span>\n<span class="token string">      &#x3C;/section></span>\n<span class="token string">  &#x3C;/div></span>\n<span class="token string">  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./code-tabs.component.scss\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CodeTabsComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> AfterViewInit <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span><span class="token string">\'headerContent\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> headerContent<span class="token operator">:</span> ElementRef<span class="token operator">&#x3C;</span>HTMLElement<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span><span class="token string">\'tabContent\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> tabContent<span class="token operator">:</span> ElementRef<span class="token operator">&#x3C;</span>HTMLElement<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span><span class="token string">\'highlight\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> highlight<span class="token operator">:</span> ElementRef<span class="token operator">&#x3C;</span>HTMLDivElement<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span><span class="token string">\'tabList\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> tabList<span class="token operator">:</span> ElementRef<span class="token operator">&#x3C;</span>HTMLElement<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> height<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\n  headers<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  selectedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> contentElem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>headerContent<span class="token operator">!</span><span class="token punctuation">.</span>nativeElement<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>contentElem<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'#code-headers li\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>li <span class="token operator">=></span> li<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tabContent<span class="token operator">!</span><span class="token punctuation">.</span>nativeElement <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">\'height-set\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tabContent<span class="token operator">!</span><span class="token punctuation">.</span>nativeElement <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span>\n  \n  <span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectTab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token function">selectTab</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>selectedIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> tabContentElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tabContent<span class="token operator">!</span><span class="token punctuation">.</span>nativeElement<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> listElements <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>tabContentElement<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'ol[tabs] li\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    listElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> elementIndex<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'none\'</span><span class="token punctuation">;</span>\n      \n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedIndex <span class="token operator">===</span> elementIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'block\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">const</span> tabListElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tabList<span class="token operator">!</span><span class="token punctuation">.</span>nativeElement<span class="token punctuation">;</span>\n   <span class="token keyword">const</span> liElements <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>tabListElement<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'li.header\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> xoffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> liElement <span class="token keyword">of</span> liElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span>liElement <span class="token operator">===</span> liElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">break</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n\n    xoffset <span class="token operator">+=</span> liElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token keyword">const</span> highlight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>highlight<span class="token operator">!</span><span class="token punctuation">.</span>nativeElement <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>\n   highlight<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> xoffset <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n   highlight<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> liElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>clientWidth <span class="token operator">+</span> <span class="token string">\'px\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n',
      'hello-world-component.md':
        '<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'hello-world\'</span><span class="token punctuation">,</span>\n    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{{foo}} &#x3C;br> &#x3C;ng-content>&#x3C;/ng-content></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    standalone<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldComponent</span> <span class="token punctuation">{</span>\n    foo <span class="token operator">=</span> <span class="token string">\'hello world\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n',
      'page-as-markdown.md':
        '<div class="remark-highlight">\n  <pre\n    class="language-md"\n  ><code class="language-md"><span class="token title important"><span class="token punctuation">#</span> Angular Components in Markdown</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-tabs</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ol</span> <span class="token attr-name">code-headers</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>page.md (this page)<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>code-tabs.component.ts<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>code-block.component.ts<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>hello-world.component.ts<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>Preview<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ol</span><span class="token punctuation">></span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ol</span> <span class="token attr-name">tabs</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-block</span> <span class="token attr-name">slug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>angular-components-in-markdown<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-as-markdown.md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-block</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-block</span> <span class="token attr-name">slug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>angular-components-in-markdown<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code-tabs-component.md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-block</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-block</span> <span class="token attr-name">slug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>angular-components-in-markdown<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code-block-component.md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-block</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-block</span> <span class="token attr-name">slug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>angular-components-in-markdown<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello-world-component.md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-block</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span> \n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>hello-world</span><span class="token punctuation">></span></span>\n        Some text to project\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>hello-world</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ol</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-tabs</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n',
      'page.md':
        '<h1>Angular Components in Markdown</h1>\n<code-tabs>\n  <ol code-headers>\n    <li>page.md (this page)</li>\n    <li>code-tabs.component.ts</li>\n    <li>code-block.component.ts</li>\n    <li>hello-world.component.ts</li>\n    <li>Preview</li>\n  </ol>\n  <ol tabs>\n    <li>\n      <code-block\n        slug="angular-components-in-markdown"\n        src="page-as-markdown.md"\n      >\n      </code-block>\n    </li>\n    <li>\n      <code-block\n        slug="angular-components-in-markdown"\n        src="code-tabs-component.md"\n      >\n      </code-block>\n    </li>\n    <li>\n      <code-block\n        slug="angular-components-in-markdown"\n        src="code-block-component.md"\n      >\n      </code-block>\n    </li>\n    <li>\n      <code-block\n        slug="angular-components-in-markdown"\n        src="hello-world-component.md"\n      >\n      </code-block>\n    </li>\n    <li>\n      <hello-world> Some text to project </hello-world>\n    </li>\n  </ol>\n</code-tabs>\n',
      'summary.md':
        '<p>\n  Examples of some of the Angular components this blog uses in Markdown files\n</p>\n',
    },
  },
  {
    date: '2022-06-01T23:12:00.000Z',
    title: 'Why are there _nghost attributes all over my HTML?',
    tags: ['Angular', 'angular', 'nghost', '_nghost'],
    description: 'Why are there _nghost attributes all over my HTML?',
    slug: 'nghost',
    sectionNames: [
      'metadata.json',
      'my-codeblock.md',
      'page-as-markdown.md',
      'page.md',
      'summary.md',
    ],
    summary:
      "<p>\n  Ever wonder what those strange <code>_nghost</code> and\n  <code>_ngcontent</code> attributes are on your HTML tags?\n</p>\n<p>\n  If this doesn't sound familiar, go to any Angular app and open the developer\n  console for your browser. Inspect the HTML source of the application and you\n  will likely see <code>_nghost</code> and <code>_ngcontent</code> attributes on\n  some DOM elements.\n</p>\n",
    codeblocks: {
      'my-codeblock.md':
        '<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'hello-world\'</span><span class="token punctuation">,</span>\n    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{{foo}} &#x3C;br> &#x3C;ng-content>&#x3C;/ng-content></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    standalone<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldComponent</span> <span class="token punctuation">{</span>\n    foo <span class="token operator">=</span> <span class="token string">\'hello world\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n',
      'page-as-markdown.md':
        '<div class="remark-highlight">\n  <pre\n    class="language-md"\n  ><code class="language-md"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-tabs</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ol</span> <span class="token attr-name">code-headers</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>page.md<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>hello-world.component.ts<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>Preview<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ol</span><span class="token punctuation">></span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ol</span> <span class="token attr-name">tabs</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-block</span> <span class="token attr-name">slug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nghost<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-as-markdown.md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-block</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>code-block</span> <span class="token attr-name">slug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nghost<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-codeblock.md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-block</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span> \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>hello-world</span><span class="token punctuation">></span></span>\n            Some text to project\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>hello-world</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ol</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>code-tabs</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n',
      'page.md':
        '<p>\n  Ever wonder what those strange <code>_nghost</code> and\n  <code>_ngcontent</code> attributes are on your HTML tags?\n</p>\n<p>\n  If this doesn\'t sound familiar, go to any Angular app and open the developer\n  console for your browser. Inspect the HTML source of the application and you\n  will likely see <code>_nghost</code> and <code>_ngcontent</code> attributes on\n  some DOM elements.\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>app-root</span> <span class="token attr-name">_nghost-mjt-c55</span> <span class="token attr-name">ng-version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ...<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>app-root</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n<p>\n  These attributes are used by Angular\'s emulated View Encapsulation mechanism\n  to scope component styles.\n</p>\n<p>\n  Whats the deal with the postfix <code>-mjt-c55</code> in the example above?\n</p>\n<p>\n  The <code>c55</code> (c is shorthand for component) is automatically generated\n  by Angular whenever a new component is defined, as a way of scoping DOM\n  elements to components so that the framework can emulate shadow DOM css.\n</p>\n<p>Behind the scenes something close to this occurs</p>\n<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">let</span> compCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ɵɵdefineComponent</span><span class="token punctuation">(</span>componentDef<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> def <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span> <span class="token comment">// Other component metadata</span>\n    id<span class="token operator">:</span> <span class="token string">\'c\'</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n  def<span class="token punctuation">.</span>id <span class="token operator">+=</span> compCounter<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> def\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n<p>\n  What about the <code>mjt</code>? You\'ll likely see a different string in your\n  projects. Similarly to how the c55 is used to scope the element to a\n  component, this random 3 character string is used to scope an element to an\n  application. It is generated once when the application is built and used for\n  every css selector within the app. It is an application ID.\n</p>\n<p>\n  This is used so that if two Angular applications are bootstrapped on the same\n  page, component styling from one application won\'t leak through to the other.\n</p>\n<p>\n  If the application ID wasn\'t there, all it would take for styles to leak from\n  one application to another is that there is a component ID collision between\n  the two apps. Since component IDs are incrementing integers starting at 0,\n  this is not an unlikely case.\n</p>\n<p>Now for the fun part.</p>\n<p>\n  You may have already tried inspecting the html source of this page. If you\n  haven\'t, do so and you\'ll see something like this,\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>blog-root</span> <span class="token attr-name">_nghost-one-framework-to-rule-them-all-c18</span> <span class="token attr-name">ng-version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>blog-navbar</span> <span class="token attr-name">_ngcontent-one-framework-to-rule-them-all-c18</span><span class="token punctuation">></span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>blog-navbar</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>blog-root</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n<p>\n  In place of a randomly generated application ID there is a string\n  "one-framework-to-rule-them-all". How did that happen?\n</p>\n<p>\n  Angular exposes the <code>APP_ID</code> dependency injection token to its\n  public API. The framework provides this token with a default factory that\n  generates the random 3-letter IDs that we\'ve been seeing. Lets take a look at\n  how the framework provides this default,\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">APP_ID</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionToken<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token string">"AppId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">_appIdRandomProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 3 random characters for the app id</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// generates a random character</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">APP_ID_RANDOM_PROVIDER</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  provide<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>\n  useFactory<span class="token operator">:</span> _appIdRandomProviderFactory<span class="token punctuation">,</span>\n  deps<span class="token operator">:</span> <span class="token operator">&#x3C;</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n</div>\n<p>\n  This means we can provide our own <code>APP_ID</code> and override the default\n  <code>APP_ID</code> provided by Angular.\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    declarations<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    providers<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>\n      <span class="token punctuation">{</span>\n        provide<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>\n        useValue<span class="token operator">:</span> <span class="token string">\'one-framework-to-rule-them-all\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n</div>\n<p>\n  Of course, it is not reccomended to overwrite <code>APP_ID</code> in this way,\n  and if we do, we should make sure we provide a factory to\n  <code>APP_ID</code> that generates a random string.\n</p>\n<p>\n  Overall this is a mostly useless trick, but one that I found to be a\n  interesting example of the power dependency injection gives to developers.\n</p>\n',
      'summary.md':
        "<p>\n  Ever wonder what those strange <code>_nghost</code> and\n  <code>_ngcontent</code> attributes are on your HTML tags?\n</p>\n<p>\n  If this doesn't sound familiar, go to any Angular app and open the developer\n  console for your browser. Inspect the HTML source of the application and you\n  will likely see <code>_nghost</code> and <code>_ngcontent</code> attributes on\n  some DOM elements.\n</p>\n",
    },
  },
  {
    date: '2022-05-31T23:12:00.000Z',
    title: 'Directive Context',
    tags: ['Angular', 'angular', 'angular directive', 'context', 'directive'],
    description: 'What is a directive context in Angular?',
    slug: 'directive-context',
    sectionNames: ['metadata.json', 'page.md', 'summary.md'],
    summary:
      '<p>\n  You may recognize the usage of <code>let isFirst = first</code> in the\n  following template\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let event of eventQueue; let isFirst = first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n',
    codeblocks: {
      'page.md':
        '<p>\n  You may recognize the usage of <code>let isFirst = first</code> in the\n  following template\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let event of eventQueue; let isFirst = first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isFirst<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pop(event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Execute Next Event<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span><span class="token punctuation">></span></span>{{ event.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n<p>\n  It is a boolean variable exposed to the template supplied to the NgFor\n  directive. It can be used to determine if the item rendering is the first item\n  in the iterable passed into the directive. The example given is somewhat\n  contrived but it should demonstrate clearly how the\n  <code>first</code> variable is being used. You can read more on the\n  <a href="https://angular.io/api/common/NgForOf#local-variables">Angular.io</a>\n  docs.\n</p>\n<p>\n  The NgFor directive is not magical, it does not possess capabilites within it\n  that are out of reach for any custom directives we may want to write\n  ourselves. So then how do we do this? Where does the\n  <code>first</code> variable come from?\n</p>\n<p>\n  NgFor is a structural directive. This means that somewhere within the\n  directive\'s logic, it changes the DOM layout by removing or creating DOM\n  elements. In this case, NgFor creates embedded views based on the template we\n  provide and the array passed in as an <code>@Input</code>. When this view is\n  created, we have the option of exposing a context to that view. The NgFor\n  directive provides a context object that contains a <code>first</code> get\n  accessor. This is how we are able to use <code>first</code> in the NgFor\n  template.\n</p>\n<p>\n  Lets build a simple structural directive that renders the template provided to\n  it and exposes a number to the created view that is randomly generated with\n  <code>Math.random()</code>\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">RandomNumberContext</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> random<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Directive</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token operator">:</span> <span class="token string">"[appRandomNumber]"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RandomNumberDirective</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    <span class="token keyword">private</span> _viewContainer<span class="token operator">:</span> ViewContainerRef<span class="token punctuation">,</span>\n    <span class="token keyword">private</span> _templateRef<span class="token operator">:</span> TemplateRef<span class="token operator">&#x3C;</span>RandomNumberContext<span class="token operator">></span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// First arg is the template we passed in, second arg is a context that we can provide to the view</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewContainer<span class="token punctuation">.</span><span class="token function">createEmbeddedView</span><span class="token punctuation">(</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_templateRef<span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">RandomNumberContext</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n<br />\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">*appRandomNumber</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let myRandomNumber = random<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  Your random num is: {{ myRandomNumber }}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n<p><directive-context-demo></directive-context-demo></p>\n<p>\n  Maybe we want to access our number as a percent. Lets expand our Context class\n  in the following way,\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-ts"\n  ><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">RandomNumberContext</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> random<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">get</span> <span class="token function">asPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>random <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</div>\n<br />\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span> <span class="token attr-name">*appRandomNumber</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let myRandomNumber = random; let myRandomPercentage = asPercent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  Your random num is: {{ myRandomNumber }}, Your random percentage is: {{ myRandomPercentage }}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n<p><directive-context-demo withGetter="true"></directive-context-demo></p>\n',
      'summary.md':
        '<p>\n  You may recognize the usage of <code>let isFirst = first</code> in the\n  following template\n</p>\n<div class="remark-highlight">\n  <pre\n    class="language-html"\n  ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let event of eventQueue; let isFirst = first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n</div>\n',
    },
  },
];
