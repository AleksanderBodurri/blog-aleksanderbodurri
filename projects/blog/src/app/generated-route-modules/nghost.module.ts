// THIS FILE WAS GENERATED BY TOOLING. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Component,
  NgModule,
  Inject,
  PLATFORM_ID,
  OnInit,
  OnDestroy,
} from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Meta } from '@angular/platform-browser';

import { CodeBlockComponent } from '../components-for-generated-routes/code-block/code-block.component';
import { CodeTabsComponent } from '../components-for-generated-routes/code-tabs/code-tabs.component';
import { DirectiveContextDemoComponent } from '../components-for-generated-routes/directive-context-demo/directive-context-demo.component';
import { HelloWorldComponent } from '../components-for-generated-routes/hello-world/hello-world.component';

@Component({
  selector: 'blog-nghost',
  template: `
    <p>
      Ever wonder what those strange <code>_nghost</code> and
      <code>_ngcontent</code> attributes are on your HTML tags?
    </p>
    <p>
      If this doesn't sound familiar, go to any Angular app and open the
      developer console for your browser. Inspect the HTML source of the
      application and you will likely see <code>_nghost</code> and
      <code>_ngcontent</code> attributes on some DOM elements.
    </p>
    <div class="remark-highlight">
      <pre
        class="language-html"
      ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>app-root</span> <span class="token attr-name">_nghost-mjt-c55</span> <span class="token attr-name">ng-version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ...<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>app-root</span><span class="token punctuation">></span></span>
</code></pre>
    </div>
    <p>
      These attributes are used by Angular's emulated View Encapsulation
      mechanism to scope component styles.
    </p>
    <p>
      Whats the deal with the postfix <code>-mjt-c55</code> in the example
      above?
    </p>
    <p>
      The <code>c55</code> (c is shorthand for component) is automatically
      generated by Angular whenever a new component is defined, as a way of
      scoping DOM elements to components so that the framework can emulate
      shadow DOM css.
    </p>
    <p>Behind the scenes something close to this occurs</p>
    <div class="remark-highlight">
      <pre
        class="language-ts"
      ><code class="language-ts"><span class="token keyword">let</span> compCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ɵɵdefineComponent</span><span class="token punctuation">(</span>componentDef<span class="token punctuation">)</span> <span class="token punctuation">{{ '{' }}</span>
  <span class="token keyword">let</span> def <span class="token operator">=</span> <span class="token punctuation">{{ '{' }}</span>
    <span class="token operator">...</span> <span class="token comment">// Other component metadata</span>
    id<span class="token operator">:</span> <span class="token string">'c'</span>
    <span class="token operator">...</span>
  <span class="token punctuation">{{ '}' }}</span>
  def<span class="token punctuation">.</span>id <span class="token operator">+=</span> compCounter<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> def
<span class="token punctuation">{{ '}' }}</span>
</code></pre>
    </div>
    <p>
      What about the <code>mjt</code>? You'll likely see a different string in
      your projects. Similarly to how the c55 is used to scope the element to a
      component, this random 3 character string is used to scope an element to
      an application. It is generated once when the application is built and
      used for every css selector within the app. It is an application ID.
    </p>
    <p>
      This is used so that if two Angular applications are bootstrapped on the
      same page, component styling from one application won't leak through to
      the other.
    </p>
    <p>
      If the application ID wasn't there, all it would take for styles to leak
      from one application to another is that there is a component ID collision
      between the two apps. Since component IDs are incrementing integers
      starting at 0, this is not an unlikely case.
    </p>
    <p>Now for the fun part.</p>
    <p>
      You may have already tried inspecting the html source of this page. If you
      haven't, do so and you'll see something like this,
    </p>
    <div class="remark-highlight">
      <pre
        class="language-html"
      ><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>blog-root</span> <span class="token attr-name">_nghost-one-framework-to-rule-them-all-c18</span> <span class="token attr-name">ng-version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>blog-navbar</span> <span class="token attr-name">_ngcontent-one-framework-to-rule-them-all-c18</span><span class="token punctuation">></span></span>
    ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>blog-navbar</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>blog-root</span><span class="token punctuation">></span></span>
</code></pre>
    </div>
    <p>
      In place of a randomly generated application ID there is a string
      "one-framework-to-rule-them-all". How did that happen?
    </p>
    <p>
      Angular exposes the <code>APP_ID</code> dependency injection token to its
      public API. The framework provides this token with a default factory that
      generates the random 3-letter IDs that we've been seeing. Lets take a look
      at how the framework provides this default,
    </p>
    <div class="remark-highlight">
      <pre
        class="language-ts"
      ><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">APP_ID</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionToken<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token string">"AppId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">_appIdRandomProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{{ '{' }}</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${{ '{' }}</span><span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">{{ '}' }}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${{ '{' }}</span><span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">{{ '}' }}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${{ '{' }}</span><span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">{{ '}' }}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 3 random characters for the app id</span>
<span class="token punctuation">{{ '}' }}</span>

<span class="token keyword">function</span> <span class="token function">_randomChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{{ '{' }}</span>
  <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// generates a random character</span>
<span class="token punctuation">{{ '}' }}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">APP_ID_RANDOM_PROVIDER</span> <span class="token operator">=</span> <span class="token punctuation">{{ '{' }}</span>
  provide<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>
  useFactory<span class="token operator">:</span> _appIdRandomProviderFactory<span class="token punctuation">,</span>
  deps<span class="token operator">:</span> <span class="token operator">&#x3C;</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">{{ '}' }}</span><span class="token punctuation">;</span>
</code></pre>
    </div>
    <p>
      This means we can provide our own <code>APP_ID</code> and override the
      default <code>APP_ID</code> provided by Angular.
    </p>
    <div class="remark-highlight">
      <pre
        class="language-ts"
      ><code class="language-ts"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{{ '{' }}</span>
    declarations<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    imports<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    providers<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>
      <span class="token punctuation">{{ '{' }}</span>
        provide<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>
        useValue<span class="token operator">:</span> <span class="token string">'one-framework-to-rule-them-all'</span><span class="token punctuation">,</span>
      <span class="token punctuation">{{ '}' }}</span>
      <span class="token operator">...</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span>
  <span class="token punctuation">{{ '}' }}</span><span class="token punctuation">)</span>
  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{{ '{' }}</span><span class="token punctuation">{{ '}' }}</span>
</code></pre>
    </div>
    <p>
      Of course, it is not reccomended to overwrite <code>APP_ID</code> in this
      way, and if we do, we should make sure we provide a factory to
      <code>APP_ID</code> that generates a random string.
    </p>
    <p>
      Overall this is a mostly useless trick, but one that I found to be a
      interesting example of the power dependency injection gives to developers.
    </p>
  `,
  styles: [
    `
      :host {
        display: block;
        max-width: 800px;
        margin: 2rem auto 0;

        @media screen and (max-width: 801px) {
          max-width: calc(100% - 24px);
        }
      }
    `,
  ],
})
export class NghostComponent implements OnInit, OnDestroy {
  constructor(
    @Inject(PLATFORM_ID) public platformId: Object,
    private meta: Meta
  ) {}

  ngOnInit(): void {
    this.meta.addTag({
      property: 'og:title',
      content: 'Why are there _nghost attributes all over my HTML?',
    });
    this.meta.addTag({ property: 'og:type', content: 'article' });
    this.meta.addTag({
      property: 'og:url',
      content: 'https://aleksanderbodurri-eefbe.web.app/posts/nghost',
    });
    this.meta.addTag({
      property: 'og:image',
      content: 'http://aleksanderbodurri-eefbe.web.app/assets/me.png',
    });
    this.meta.addTag({
      property: 'og:image:secure_url',
      content: 'https://aleksanderbodurri-eefbe.web.app/assets/me.png',
    });

    if (true) {
      this.meta.addTag({
        name: 'description',
        content: 'Why are there _nghost attributes all over my HTML?',
      });
    }

    if (true) {
      this.meta.addTag({
        name: 'keywords',
        content: 'blog,post,Angular,angular,nghost,_nghost',
      });
    }
  }

  ngOnDestroy(): void {
    this.meta.removeTag('property="oh:title"');
    this.meta.removeTag('property="oh:type"');
    this.meta.removeTag('property="oh:url"');
    this.meta.removeTag('property="oh:image"');
    this.meta.removeTag('property="oh:image:secure_url"');

    if (true) {
      this.meta.removeTag('name=description');
    }

    if (true) {
      this.meta.removeTag('name=keywords');
    }
  }
}

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild([
      {
        path: '',
        pathMatch: 'full',
        component: NghostComponent,
      },
    ]),
    CodeBlockComponent,
    CodeTabsComponent,
    DirectiveContextDemoComponent,
    HelloWorldComponent,
  ],
  declarations: [NghostComponent],
  bootstrap: [],
})
export class LazyModule {}
